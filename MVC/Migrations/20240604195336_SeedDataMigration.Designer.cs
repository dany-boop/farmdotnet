// <auto-generated />
using System;
using MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240604195336_SeedDataMigration")]
    partial class SeedDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MVC.Models.Entity.CattleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CattleType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bce702e-f150-4769-9463-2f54fe7cf171"),
                            Is_active = true,
                            Name = "Type1",
                            Note = "Note for Type1"
                        });
                });

            modelBuilder.Entity("MVC.Models.Entity.Farm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Buy_Price")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Female_Breeder")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Investor_Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Male_Breeder")
                        .HasColumnType("char(36)");

                    b.Property<int>("Sell_Price")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Treament_Price")
                        .HasColumnType("int");

                    b.Property<Guid>("Type_Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Investor_Id");

                    b.HasIndex("Type_Id");

                    b.ToTable("Farm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0592d5c3-bf60-4ce8-b6bd-f48a26a2c7bc"),
                            Buy_Price = 1000,
                            Code = "FARM001",
                            Female_Breeder = new Guid("043d9b20-b26b-48dd-b621-f86b4fb432f5"),
                            Investor_Id = new Guid("9e0600a7-f0f3-40f0-8f30-698554d9705b"),
                            Male_Breeder = new Guid("77c7a5f9-018e-4f58-8b1b-3551ca5aac10"),
                            Sell_Price = 1500,
                            Status = 1,
                            Treament_Price = 200,
                            Type_Id = new Guid("4bce702e-f150-4769-9463-2f54fe7cf171")
                        });
                });

            modelBuilder.Entity("MVC.Models.Entity.FarmExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Farm_Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Img1")
                        .HasColumnType("longtext");

                    b.Property<string>("Img2")
                        .HasColumnType("longtext");

                    b.Property<string>("Img3")
                        .HasColumnType("longtext");

                    b.Property<string>("Img4")
                        .HasColumnType("longtext");

                    b.Property<string>("Img5")
                        .HasColumnType("longtext");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Farm_Id");

                    b.ToTable("FarmExpense");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c30348ca-9ca5-45e1-b189-d05c3027a08f"),
                            Date = new DateTime(2024, 5, 26, 2, 53, 28, 508, DateTimeKind.Local).AddTicks(6684),
                            Farm_Id = new Guid("0592d5c3-bf60-4ce8-b6bd-f48a26a2c7bc"),
                            Total = "1000"
                        });
                });

            modelBuilder.Entity("MVC.Models.Entity.FarmExpenseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FarmExpenseCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d886e56-f601-4c35-94d1-de3de9a44be9"),
                            Is_active = true,
                            Name = "Feed"
                        });
                });

            modelBuilder.Entity("MVC.Models.Entity.FarmImg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Category_Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Farm_Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Img1")
                        .HasColumnType("longtext");

                    b.Property<string>("Img2")
                        .HasColumnType("longtext");

                    b.Property<string>("Img3")
                        .HasColumnType("longtext");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.HasIndex("Farm_Id");

                    b.ToTable("FarmImg");
                });

            modelBuilder.Entity("MVC.Models.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e0600a7-f0f3-40f0-8f30-698554d9705b"),
                            Email = "john.doe@example.com",
                            Is_active = true,
                            Name = "John Doe",
                            Password = "password123",
                            Phone = "1234567890",
                            Role = "investor"
                        });
                });

            modelBuilder.Entity("MVC.Models.Entity.Farm", b =>
                {
                    b.HasOne("MVC.Models.Entity.User", "Investor")
                        .WithMany()
                        .HasForeignKey("Investor_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC.Models.Entity.CattleType", "Type")
                        .WithMany()
                        .HasForeignKey("Type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investor");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MVC.Models.Entity.FarmExpense", b =>
                {
                    b.HasOne("MVC.Models.Entity.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("Farm_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("MVC.Models.Entity.FarmImg", b =>
                {
                    b.HasOne("MVC.Models.Entity.FarmExpenseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC.Models.Entity.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("Farm_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Farm");
                });
#pragma warning restore 612, 618
        }
    }
}
